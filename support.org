#+OPTIONS: \n:t
* I Fixed-size data
** 1-4
*** Keys
function definition,
function application,
conditional expression,
constant definition,
magic numbers,

atomic data,
primitive operation,
anchor point,
if,
sub-expression,
argument,
unary function,
binary function,
ternary function,
function body,
function header,
comparison primitives,
main function,
functions composition,
auxiliary (helper) functions,
global variable,
constant definition,
right-hand side,
literal constants,
computed constants,

batch program,
{interactive program:
  event,
  event-driven program,
  event handlers}

data definitions,
function's signature,
purpose statement,
function's header (stub),
functional examples,
template,
inventory,
wish list,
domain knowledge,
unit testing,

final state,
*** Notes
- Repl can display images.
- To load image use 'bitmap' or 'bitmap-url' function.
- To thread program and not hang out emacs (for e.g. animate function) use
  '(thread (lambda () (...)))'

(define (FunctionName InputName) BodyExpression)

(FunctionName ArgumentExpression)

(cond
[ConditionExpression1 ResultExpression1]
[ConditionExpression2 ResultExpression2]
...
[ConditionExpressionN ResultExpressionN])

(define Name Expression)

(if question-expression then-answer-expression else-answer-expression)

(require 2htdp/batch-io) allows IO to files and 'stdout.
Use (write-file 'stdout (function application))

Write global variables in uppercase.

Define one function per task

For every constant mentioned in a problem statement, introduce one constant
definition

#+BEGIN_SRC racket :lang htdp/bsl :results output
  (require 2htdp/image)
  (require 2htdp/universe)

  (define (number->square s)
    (square s "solid" "red"))

  (define (reset s ke)
    100)

  (big-bang 100
            [to-draw number->square]
            [on-tick sub1]
            [stop-when zero?]
            [on-key reset])
#+END_SRC
#+RESULTS:
: 0

#+BEGIN_SRC racket :lang htdp/bsl :results output
  (require 2htdp/image)
  (require 2htdp/universe)

  (define BACKGROUND (empty-scene 100 100))
  (define DOT (circle 3 "solid" "red"))

  (define (main y)
    (big-bang y
              [on-tick sub1]
              [stop-when zero?]
              [to-draw place-dot-at]
              [on-key stop]))

  (define (place-dot-at y)
    (place-image DOT 50 y BACKGROUND))

  (define (stop y ke)
    0)

  (main 100)
#+END_SRC

#+RESULTS:
: 0

** 4 Intervals, enumerations, and itemizations
*** Keys
*** Notes
